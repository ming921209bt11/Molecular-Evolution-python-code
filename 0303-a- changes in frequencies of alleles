import numpy as np
import matplotlib.pyplot as plt
from matplotlib.cm import get_cmap
import seaborn as sns

# Set seed for reproducibility
np.random.seed(42)

# Simulation parameters
generations = 100
num_populations = 10
population_sizes = np.logspace(1, 3, num_populations).astype(int)  # From 10 to 1000
initial_frequency = 0.5

# Create a figure with subplots
fig, axes = plt.subplots(5, 2, figsize=(15, 18), sharex=True)
axes = axes.flatten()

# Get a colormap for different population sizes
cmap = get_cmap('viridis')
colors = [cmap(i/num_populations) for i in range(num_populations)]

# Function to simulate genetic drift
def simulate_drift(pop_size, initial_freq, generations):
    freqs = np.zeros(generations + 1)
    freqs[0] = initial_freq
    
    for gen in range(1, generations + 1):
        # Binomial sampling to simulate random genetic drift
        count = np.random.binomial(2 * pop_size, freqs[gen-1])
        freqs[gen] = count / (2 * pop_size)
    
    return freqs

# Simulate and plot for each population size
for i, pop_size in enumerate(population_sizes):
    ax = axes[i]
    
    # Run 10 replicates for each population size
    for j in range(10):
        freqs = simulate_drift(pop_size, initial_frequency, generations)
        ax.plot(range(generations + 1), freqs, color=colors[i], alpha=0.3)
    
    # Plot the mean trajectory
    mean_freqs = np.zeros(generations + 1)
    mean_freqs[0] = initial_frequency
    for gen in range(1, generations + 1):
        # Average of 100 runs for smoother mean line
        counts = np.random.binomial(2 * pop_size, mean_freqs[gen-1], size=100)
        mean_freqs[gen] = np.mean(counts) / (2 * pop_size)
    
    ax.plot(range(generations + 1), mean_freqs, color=colors[i], linewidth=2.5)
    
    # Add reference lines
    ax.axhline(y=0, color='black', linestyle='--', alpha=0.3)
    ax.axhline(y=1, color='black', linestyle='--', alpha=0.3)
    ax.axhline(y=initial_frequency, color='gray', linestyle=':', alpha=0.5)
    
    # Set labels
    ax.set_title(f'Population Size: {pop_size}', fontsize=12)
    ax.set_ylim(-0.05, 1.05)
    ax.set_ylabel('Allele Frequency')
    
    # Only add x-label for bottom plots
    if i >= 8:
        ax.set_xlabel('Generations')

# Create a combined plot showing all population sizes
fig2, ax2 = plt.subplots(figsize=(12, 8))

# Plot one line for each population size
for i, pop_size in enumerate(population_sizes):
    # Run a single simulation for each size
    freqs = simulate_drift(pop_size, initial_frequency, generations)
    ax2.plot(range(generations + 1), freqs, color=colors[i], linewidth=2, 
             label=f'N = {pop_size}')

# Add reference lines
ax2.axhline(y=0, color='black', linestyle='--', alpha=0.3)
ax2.axhline(y=1, color='black', linestyle='--', alpha=0.3)
ax2.axhline(y=initial_frequency, color='gray', linestyle=':', alpha=0.5)

# Set labels and legend
ax2.set_title('Genetic Drift Across Different Population Sizes', fontsize=14)
ax2.set_xlabel('Generations', fontsize=12)
ax2.set_ylabel('Allele Frequency', fontsize=12)
ax2.set_ylim(-0.05, 1.05)
ax2.legend(title='Population Size', bbox_to_anchor=(1.05, 1), loc='upper left')

plt.tight_layout()

# Show both figures
plt.figure(fig.number)
plt.suptitle('Genetic Drift in Different Population Sizes\n(10 replicates per population)', 
             fontsize=16, y=0.995)
plt.tight_layout(rect=[0, 0, 1, 0.98])

plt.figure(fig2.number)
plt.tight_layout()

plt.show()
